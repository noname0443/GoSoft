// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	ID        string `json:"id"`
	Userid    string `json:"userid"`
	Date      string `json:"date"`
	Productid string `json:"productid"`
	Content   string `json:"content"`
}

type NewProduct struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Photo       string  `json:"photo"`
	File        string  `json:"file"`
	Price       float64 `json:"price"`
}

type Product struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Photo       string  `json:"photo"`
	File        string  `json:"file"`
	Price       float64 `json:"price"`
}

type User struct {
	ID      string `json:"id"`
	Email   string `json:"email"`
	Name    string `json:"name"`
	Surname string `json:"surname"`
	Gender  string `json:"gender"`
	Date    string `json:"date"`
	Role    Roles  `json:"role"`
}

type Roles string

const (
	RolesCustomer      Roles = "Customer"
	RolesAdministrator Roles = "Administrator"
)

var AllRoles = []Roles{
	RolesCustomer,
	RolesAdministrator,
}

func (e Roles) IsValid() bool {
	switch e {
	case RolesCustomer, RolesAdministrator:
		return true
	}
	return false
}

func (e Roles) String() string {
	return string(e)
}

func (e *Roles) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Roles(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Roles", str)
	}
	return nil
}

func (e Roles) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
