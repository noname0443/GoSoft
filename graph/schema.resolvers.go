package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"GoSoft/DBMS"
	"GoSoft/graph/model"
	"context"
	"fmt"
	"math"
)

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, name *string, categories *string, lowerPrice *float64, highestPrice *float64) ([]*model.Product, error) {
	var preparedName string
	var preparedCategory string
	var preparedLowerPrice float64
	var preparedHighestPrice float64

	if name == nil {
		preparedName = ""
	} else {
		preparedName = *name
	}

	if categories == nil {
		preparedCategory = ""
	} else {
		preparedCategory = *categories
	}

	if lowerPrice == nil {
		preparedLowerPrice = 0
	} else {
		preparedLowerPrice = *lowerPrice
	}

	if highestPrice == nil {
		preparedHighestPrice = math.Inf(0)
	} else {
		preparedHighestPrice = *highestPrice
	}

	fmt.Println(preparedName, categories, preparedLowerPrice, preparedHighestPrice)

	products, err := DBMS.SearchProducts(preparedName, preparedCategory, preparedLowerPrice, preparedHighestPrice)
	if err != nil {
		return nil, err
	}
	return products, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id int) (*model.Product, error) {
	product, err := DBMS.GetProduct(id)
	if err != nil {
		return nil, err
	}
	return product, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, productid int, from *int, count *int) ([]*model.Comment, error) {
	var preparedFrom int
	var preparedCount int

	if from != nil && *from > 0 {
		preparedFrom = *from
	} else {
		preparedFrom = 0
	}

	if count != nil && *count > preparedFrom && *count <= preparedFrom - 10 {
		preparedCount = *count
	} else {
		preparedCount = 5
	}

	comments, err := DBMS.GetComments(productid, preparedFrom, preparedCount)
	if err != nil {
		return nil, err
	}
	return comments, nil
}

// Register is the resolver for the register field.
func (r *queryResolver) Register(ctx context.Context, email string, name string, surname string, gender string, password string) (string, error) {
	token, err := DBMS.RegisterCustomer(email, name, surname, gender, password)
	if err != nil {
		return "", err
	}
	return token, nil
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, email string, password string) (string, error) {
	token, err := DBMS.LoginCustomer(email, password)
	if err != nil {
		return "", err
	}
	return token, nil
}

// CartAdd is the resolver for the CartAdd field.
func (r *queryResolver) CartAdd(ctx context.Context, authToken model.Token, productid int) (*bool, error) {
	panic(fmt.Errorf("not implemented: CartAdd - CartAdd"))
}

// CartRemove is the resolver for the CartRemove field.
func (r *queryResolver) CartRemove(ctx context.Context, authToken model.Token, cartid int) (*bool, error) {
	panic(fmt.Errorf("not implemented: CartRemove - CartRemove"))
}

// CartInspect is the resolver for the CartInspect field.
func (r *queryResolver) CartInspect(ctx context.Context, authToken model.Token, cartid int) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: CartInspect - CartInspect"))
}

// CartPurchase is the resolver for the CartPurchase field.
func (r *queryResolver) CartPurchase(ctx context.Context, authToken model.Token) (*bool, error) {
	panic(fmt.Errorf("not implemented: CartPurchase - CartPurchase"))
}

// ProfileGet is the resolver for the ProfileGet field.
func (r *queryResolver) ProfileGet(ctx context.Context, authToken model.Token) (*model.User, error) {
	panic(fmt.Errorf("not implemented: ProfileGet - ProfileGet"))
}

// ProfileUpdate is the resolver for the ProfileUpdate field.
func (r *queryResolver) ProfileUpdate(ctx context.Context, authToken model.Token, email *string, name *string, surname *string, gender *string, password *string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: ProfileUpdate - ProfileUpdate"))
}

// History is the resolver for the History field.
func (r *queryResolver) History(ctx context.Context, authToken model.Token) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: History - History"))
}

// CommentAdd is the resolver for the CommentAdd field.
func (r *queryResolver) CommentAdd(ctx context.Context, authToken model.Token, content string, productid int) (*bool, error) {
	panic(fmt.Errorf("not implemented: CommentAdd - CommentAdd"))
}

// CommentRemove is the resolver for the CommentRemove field.
func (r *queryResolver) CommentRemove(ctx context.Context, authToken model.Token, commentid int) (*bool, error) {
	panic(fmt.Errorf("not implemented: CommentRemove - CommentRemove"))
}

// CommentUpdate is the resolver for the CommentUpdate field.
func (r *queryResolver) CommentUpdate(ctx context.Context, authToken model.Token, commentid int) (*bool, error) {
	panic(fmt.Errorf("not implemented: CommentUpdate - CommentUpdate"))
}

// StoreAdd is the resolver for the StoreAdd field.
func (r *queryResolver) StoreAdd(ctx context.Context, authToken model.Token, product model.NewProduct) (*bool, error) {
	panic(fmt.Errorf("not implemented: StoreAdd - StoreAdd"))
}

// StoreRemove is the resolver for the StoreRemove field.
func (r *queryResolver) StoreRemove(ctx context.Context, authToken model.Token, productid int) (*bool, error) {
	panic(fmt.Errorf("not implemented: StoreRemove - StoreRemove"))
}

// StoreUpdate is the resolver for the StoreUpdate field.
func (r *queryResolver) StoreUpdate(ctx context.Context, authToken model.Token, productid int, product model.NewProduct) (*bool, error) {
	panic(fmt.Errorf("not implemented: StoreUpdate - StoreUpdate"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
